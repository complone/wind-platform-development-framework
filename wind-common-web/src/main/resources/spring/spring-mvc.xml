<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop" 
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd 
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">
 	 
	<!-- 使用 mvc:annotation-driven代替上边注解映射器和注解适配器配置
	mvc:annotation-driven默认加载很多的参数绑定方法，比如json转换解析器就默认加载了，
	如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter
	实际开发时使用mvc:annotation-driven
	 -->
	<mvc:annotation-driven validator="validator">
        <mvc:message-converters register-defaults="true">
            <!-- 配置Fastjson 替换原来的jackson支持 -->
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>
                        <value>application/json</value>
                    </list>
                </property>
                <property name="features">
                    <list>
                        <value>QuoteFieldNames</value> 
                        <value>WriteMapNullValue</value>  
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
	
	<!-- 也不用配置具体的Controller了，直接使用这个进行扫描包即可，也可以扫描service -->
	<context:component-scan base-package="com.zoe.demo.controller"></context:component-scan>
	
	<!-- 配置视图解析器 	进行jsp解析，默认使用jstl标签，classpath下得有jstl的包 	-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" />
	
	<!-- 自定义参数绑定 -->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<!-- 转换器 -->
		<property name="converters">
			<list>
				<!-- 日期类型转换 -->
				<bean class="com.zoe.common.web.converter.CustomDateConverter"/>
			</list>
		</property>
	</bean>
	
	<!-- 配置校验器 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!-- 校验器，使用hibernate校验器 -->
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
		<!-- 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下面的ValidationMessages.properties文件 -->
		<property name="validationMessageSource" ref="messageSource"/>
	</bean>
	<!-- 校验错误信息配置文件 -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- 资源文件名 -->
		<property name="basenames">
			<list>
				<value>classpath:message/CustomValidationMessage</value>
			</list>
		</property>
		<!-- 资源文件编码格式 -->
		<property name="fileEncodings" value="utf-8"/>
		<!-- 对资源文件内容缓存时间，单位秒 -->
		<property name="cacheSeconds" value="120"/>
        <property name="defaultEncoding" value="UTF-8"/>
	</bean>
	
	<!-- springmvc提供的简单异常处理器 
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="defaultErrorView" value="/WEB-INF/jsp/error.jsp"/>
		<property name="exceptionAttribute" value="ex"/>
		<property name="exceptionMappings">
			<props>
				<prop key="ssm.exception.CustomException">/WEB-INF/jsp/custom_error.jsp</prop>
			</props>
		</property>
	</bean>
	-->
	
	<!-- 自定义的全局异常处理器只要实现HandlerExceptionResolver接口就是全局异常处理器 -->	
	<!-- <bean class="com.zoe.common.web.exception.CustomExceptionResolver"></bean> -->
	 
	<!-- 文件上传 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 设置船上文件的最大尺寸为5MB -->
		<property name="maxUploadSize" value="5242880"/>
		<property name="defaultEncoding" value="utf-8"/>
	</bean>
	
	<!-- 静态资源解析，包括js,css,img... -->
	<mvc:resources location="/js/" mapping="/js/**"></mvc:resources>
	<mvc:resources location="/img/" mapping="/img/**"></mvc:resources>
	
	<!-- 配置拦截器 -->
	<mvc:interceptors>
		<!-- 多个拦截器，按顺序执行 -->		
		<mvc:interceptor>
			<mvc:mapping path="/**"/> <!-- 拦截所有的url包括子url路径 -->
			<bean class="com.zoe.common.web.interceptor.LoginInterceptor"/>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**"/> <!-- 拦截所有的url包括子url路径 -->
			<bean class="com.zoe.common.web.interceptor.HandlerInterceptor1"/>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="com.zoe.common.web.interceptor.HandlerInterceptor2"/>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="com.zoe.common.web.interceptor.HandlerInterceptor3"/>
		</mvc:interceptor>
	</mvc:interceptors>
</beans>